/* Exercicio 01 - Criar uma Função para calcular desconto

Criar uma função que calcule o desconto do produto, passar os parâmetros código do produto e aplicarDesconto boolean

Regra:
- Fazer um select bucando o valor do produto
- Se a parametro aplicarDseconto for igual verdadeiro aplicar desconto de 10%
*/

CREATE OR REPLACE FUNCTION CalculaDesconto(IdProduto NUMBER, AplicarDesconto NUMBER) RETURN NUMBER IS

BEGIN
        FOR produto IN (SELECT * FROM ProdutoPreco WHERE ID = IdProduto) LOOP
        IF produto.Id_Produto = IdProduto THEN
            IF aplicarDesconto = 1 THEN
                DBMS_OUTPUT.PUT_LINE('Retornando valor com 10% de desconto');
            RETURN produto.Valor - (produto.Valor * 0.10);
            ELSE 
                DBMS_OUTPUT.PUT_LINE('Retornando valor sem desconto');
                RETURN produto.Valor;
            END IF;
        END IF;
    END LOOP;    
END;

-- Chamando a FUNCTION do exercício 01
SELECT ID, Id_Produto, Valor, CalculaDesconto(Id_Produto, 1) AS ValorComDesconto FROM ProdutoPreco WHERE Id = 1;


/* Exercício 02 - Criar uma view chamada ApenasLeituraProdutoPreco

Criar uma View que retorne os dados ID, utilizando a configuração de apenas leitura, utilizar o comando WITH READ ONLY
*/

CREATE OR REPLACE VIEW ApenasLeituraProdutoPreco
AS
    SELECT ID FROM ProdutoPreco WITH READ ONLY;

-- Chamando a VIEW do exercício 02
SELECT * FROM ApenasLeituraProdutoPreco;
DELETE FROM ApenasLeituraProdutoPreco WHERE Id = 1;


/* Exercício 03 - Criar uma view chamada BuscarProduto

Nesta view deve utilizar o comando WITH CHECK OPTION, com o seguinte regra

Produto entre 100 e 200 não poderá ser Atualizado ao efetuar o update na view BuscarProduto
*/

CREATE OR REPLACE VIEW BuscarProduto
AS
    SELECT ID, Id_Produto, Valor, Status FROM ProdutoPreco WHERE Valor NOT BETWEEN 100 AND 200 WITH CHECK OPTION;
    --SELECT ID, Id_Produto, Valor, Status FROM ProdutoPreco WHERE Valor < 100 OR Valor > 200 WITH CHECK OPTION;

-- Chamando a VIEW do exercício 03
SELECT * FROM BuscarProduto;
UPDATE BuscarProduto SET Valor = 500.99 WHERE ID = 1;

SELECT * FROM ProdutoPreco;
SELECT * FROM Produto;


/* Exercício 04 - Crie uma tabela de Log

Criar uma tabela de log com as colunas

ID NUMBER
Campo VARCHAR(100)
ValorAntigo VARHCAR(100)
NomeTabela VARCHAR(100)
*/

CREATE TABLE Log(
    Id NUMBER, -- GENERATED BY DEFAULT AS IDENTITY
    Campo VARCHAR2(100),
    ValorAntigo VARCHAR2(100),
    NomeTabela VARCHAR2(100),
    Evento VARCHAR2(100)
);



/* Exercício 05 - Criar um trigger after na tabela Produto

A trigger deve efetuar o INSERT na tabela de LOG dos campos alterados
*/

CREATE OR REPLACE TRIGGER insereAlteracoesNoLog
AFTER UPDATE ON Produto
REFERENCING OLD AS Old 
FOR EACH ROW

DECLARE
    idProduto Produto.Id%Type;
    descricao Produto.Descricao%Type;
    status Produto.Status%Type;
    cadastro Produto.Cadastro%Type;
    qtdEstoque Produto.QuantidadeEmEstoque%Type;
    
BEGIN
    idProduto := :Old.Id;
    descricao := :Old.Descricao;
    status := :Old.Status;
    cadastro := :Old.Cadastro;
    qtdEstoque := :Old.QuantidadeEmEstoque;
    
    INSERT INTO Log(Id, Campo, ValorAntigo, NomeTabela, Evento) VALUES(idProduto, 'Descricao', descricao, 'Produto', 'AFTER UPDATE');
    INSERT INTO Log(Id, Campo, ValorAntigo, NomeTabela, Evento) VALUES(idProduto, 'Status', status, 'Produto', 'AFTER UPDATE');
    INSERT INTO Log(Id, Campo, ValorAntigo, NomeTabela, Evento) VALUES(idProduto, 'Cadastro', cadastro, 'Produto', 'AFTER UPDATE');
    INSERT INTO Log(Id, Campo, ValorAntigo, NomeTabela, Evento) VALUES(idProduto, 'QuantidadeEmEstoque', qtdEstoque, 'Produto', 'AFTER UPDATE');

END;

-- Chamando a TRIGGER do exercício 05
UPDATE Produto SET Status = 0 WHERE id = 18;
SELECT * FROM Log;
SELECT * FROM ProdutoPreco;
SELECT * FROM Produto;

/* Exercício 06 - Criar um trigger before na tabela ProdutoPreco

Essa trigger deve logar apenas os dados deletados da tabela ProdutoPreco
*/

CREATE OR REPLACE TRIGGER insereDeleteNoLog
BEFORE DELETE ON ProdutoPreco
REFERENCING OLD AS Old 
FOR EACH ROW

DECLARE
    idProdutoPreco ProdutoPreco.Id%Type;
    idProduto ProdutoPreco.Id_Produto%Type;
    valor ProdutoPreco.Valor%Type;
    status ProdutoPreco.Status%Type;
    cadastro Produto.Cadastro%Type;
BEGIN
    idProdutoPreco := :Old.Id;
    idProduto := :Old.Id_Produto;
    valor := :Old.Valor;
    status := :Old.Status;
    cadastro := :Old.Cadastro;
    
    INSERT INTO Log(Id, Campo, ValorAntigo, NomeTabela, Evento) VALUES(idProdutoPreco, 'Id_Produto', idProduto, 'ProdutoPreco', 'BEFORE DELETE');
    INSERT INTO Log(Id, Campo, ValorAntigo, NomeTabela, Evento) VALUES(idProdutoPreco, 'Valor', valor, 'ProdutoPreco', 'BEFORE DELETE');
    INSERT INTO Log(Id, Campo, ValorAntigo, NomeTabela, Evento) VALUES(idProdutoPreco, 'Status', status, 'ProdutoPreco', 'BEFORE DELETE');
    INSERT INTO Log(Id, Campo, ValorAntigo, NomeTabela, Evento) VALUES(idProdutoPreco, 'Cadastro', cadastro, 'ProdutoPreco', 'BEFORE DELETE');
    
END;

-- Chamando a TRIGGER do exercício 06
DELETE FROM ProdutoPreco WHERE Id IN(20, 21);
SELECT * FROM ProdutoPreco;
SELECT * FROM Log;